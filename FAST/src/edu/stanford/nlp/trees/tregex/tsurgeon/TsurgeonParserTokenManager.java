/* Generated By:JJTree&JavaCC: Do not edit this line. TsurgeonParserTokenManager.java */
package edu.stanford.nlp.trees.tregex.tsurgeon;

public class TsurgeonParserTokenManager implements TsurgeonParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ff0L) != 0L)
         {
            jjmatchedKind = 16;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ff0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x7ff0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x7df0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0x200L) != 0L)
            return 42;
         return -1;
      case 4:
         if ((active0 & 0x7dd0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x20L) != 0L)
            return 42;
         return -1;
      case 5:
         if ((active0 & 0x4440L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 5;
            }
            return 42;
         }
         if ((active0 & 0x3990L) != 0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3800L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x440L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x450L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x50L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x110L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4020L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x3800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x3800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 42);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x4040L);
      case 110:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x3000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 42);
         break;
      case 72:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 42);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 42);
         break;
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 42);
         break;
      case 120:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0xf3fffcfa00000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(19);
                  }
                  if ((0x23ff240000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  if ((0xf3fffcfa00000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(21);
                  }
                  if ((0x240000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 35)
                     jjAddStates(0, 1);
                  else if (curChar == 36)
                     jjAddStates(2, 3);
                  else if (curChar == 47)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(5, 6);
                  if (curChar == 35)
                     jjCheckNAdd(18);
                  break;
               case 1:
                  if ((0x23ff240000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(6);
                  break;
               case 7:
               case 8:
                  if (curChar == 47)
                     jjCheckNAddStates(4, 6);
                  break;
               case 10:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 11:
                  if (curChar == 47 && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 17:
                  if (curChar == 35)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0xf3fffcfa00000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 40)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0xf3fffcfa00000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 36)
                     jjAddStates(2, 3);
                  break;
               case 23:
                  if (curChar == 45 && kind > 18)
                     kind = 18;
                  break;
               case 24:
                  if (curChar == 43 && kind > 18)
                     kind = 18;
                  break;
               case 25:
                  if (curChar == 35)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(19);
                  }
                  if ((0x17fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(19);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 124)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(3);
                  }
                  break;
               case 1:
                  if ((0x17fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(3);
                  break;
               case 9:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  jjAddStates(4, 6);
                  break;
               case 12:
               case 13:
                  if (curChar == 124)
                     jjCheckNAddStates(7, 9);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 16:
                  if (curChar == 124 && kind > 20)
                     kind = 20;
                  break;
               case 19:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if (curChar == 116 && kind > 15)
                     kind = 15;
                  break;
               case 27:
               case 35:
                  if (curChar == 115)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 6);
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = SimpleCharStream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   34, 41, 23, 24, 9, 10, 11, 14, 15, 16, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\144\145\154\145\164\145", "\160\162\165\156\145", 
"\162\145\154\141\142\145\154", "\145\170\143\151\163\145", "\151\156\163\145\162\164", "\155\157\166\145", 
"\162\145\160\154\141\143\145", "\141\144\152\157\151\156", "\141\144\152\157\151\156\110", 
"\141\144\152\157\151\156\106", "\143\157\151\156\144\145\170", null, null, null, null, null, null, null, null, 
null, "\12", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[42];
static private final int[] jjstateSet = new int[84];
static protected char curChar;
public TsurgeonParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public TsurgeonParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? SimpleCharStream.GetImage() : im;
   t.beginLine = SimpleCharStream.getBeginLine();
   t.beginColumn = SimpleCharStream.getBeginColumn();
   t.endLine = SimpleCharStream.getEndLine();
   t.endColumn = SimpleCharStream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = SimpleCharStream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { SimpleCharStream.backup(0);
      while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
         curChar = SimpleCharStream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         SimpleCharStream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = SimpleCharStream.getEndLine();
   int error_column = SimpleCharStream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { SimpleCharStream.readChar(); SimpleCharStream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      SimpleCharStream.backup(1);
      error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
