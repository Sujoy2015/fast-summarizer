/* The following code was generated by JFlex 1.4.1 on 5/3/05 10:56 PM */

package edu.stanford.nlp.trees.international.pennchinese;

import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

/** 
 * A lexer for the Penn Chinese Treebank.  Supports Chinese characters.
 *
 * @author Roger Levy
 */


class CHTBLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREAMBLE = 7;
  public static final int DOCNO = 1;
  public static final int DATEINHEADER = 6;
  public static final int YYINITIAL = 0;
  public static final int SRCID = 4;
  public static final int HEADER = 5;
  public static final int DATETIME = 3;
  public static final int DOCTYPE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\27\1\30\1\30\1\26\22\0\1\31\2\24\1\0"+
    "\1\24\1\0\1\33\1\24\1\32\1\32\1\33\1\25\1\25\1\25"+
    "\1\25\1\10\12\25\2\33\1\1\1\33\1\2\1\24\1\0\1\5"+
    "\1\22\1\12\1\6\1\4\2\25\1\3\1\14\2\25\1\23\1\20"+
    "\1\13\1\11\1\17\1\25\1\7\1\21\1\15\4\25\1\16\1\25"+
    "\5\0\1\24\32\25\3\0\1\24\6\0\1\30\33\0\26\24\1\24"+
    "\10\24\27\0\1\24\u029b\0\1\24\u1c8c\0\30\24\7\24\11\24\1\24"+
    "\1\24\106\24\360\0\40\24\266\0\1\24\u02c9\0\200\24\40\0\53\24"+
    "\1\24\64\24\u0a00\0\100\24\300\0\60\24\u02d0\0\u19c0\24\100\0\u51b0\24"+
    "\u43cb\0\1\24\u1ab4\0\40\24\260\0\1\24\136\24\221\24\15\0\1\24"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\3\2\3\3\2\2\1\3\7\1\1\0"+
    "\5\2\10\0\5\2\10\0\5\2\10\0\7\2\10\0"+
    "\1\2\1\4\5\2\4\0\1\5\4\0\2\2\1\6"+
    "\2\2\1\7\2\0\1\10\3\0\1\11\2\0\1\12"+
    "\3\2\1\13\5\0\1\2\1\14\1\2\5\0\1\2"+
    "\1\15\1\16\6\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\340\0\u016c\0\340"+
    "\0\u0188\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c"+
    "\0\u0268\0\u0284\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c"+
    "\0\u0348\0\u0364\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c"+
    "\0\u0428\0\u0444\0\u0460\0\u047c\0\u0498\0\u04b4\0\u04d0\0\u04ec"+
    "\0\u0508\0\u0524\0\u0540\0\u055c\0\u0578\0\u0594\0\u05b0\0\u05cc"+
    "\0\u05e8\0\u0604\0\u0620\0\u063c\0\u0658\0\u0674\0\u0690\0\u06ac"+
    "\0\u06c8\0\u06e4\0\u0700\0\u071c\0\u0738\0\u0754\0\u0770\0\u078c"+
    "\0\u07a8\0\u07c4\0\u07e0\0\u07fc\0\u0818\0\u0834\0\u0850\0\u086c"+
    "\0\u0888\0\340\0\u08a4\0\u08c0\0\u08dc\0\u08f8\0\u0914\0\u0930"+
    "\0\u094c\0\u0968\0\u0984\0\340\0\u09a0\0\u09bc\0\u09d8\0\u09f4"+
    "\0\u0a10\0\u0a2c\0\340\0\u0a48\0\u0a64\0\340\0\u0a80\0\u0a9c"+
    "\0\340\0\u0ab8\0\u0ad4\0\u0af0\0\340\0\u0b0c\0\u0b28\0\340"+
    "\0\u0b44\0\u0b60\0\u0b7c\0\340\0\u0b98\0\u0bb4\0\u0bd0\0\u0bec"+
    "\0\u0c08\0\u0c24\0\340\0\u0c40\0\u0c5c\0\u0c78\0\u0c94\0\u0cb0"+
    "\0\u0ccc\0\u0ce8\0\340\0\340\0\u0d04\0\u0d20\0\u0d3c\0\u0d58"+
    "\0\u0d74\0\u0d90\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\11\21\13\1\14\1\13\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\33\22\1\24\33\22"+
    "\1\25\33\22\1\26\33\22\1\27\33\22\1\30\33\22"+
    "\1\31\32\22\34\0\1\32\1\33\1\0\1\34\2\33"+
    "\1\35\10\33\1\36\1\33\1\37\2\33\1\32\1\33"+
    "\5\32\1\33\1\0\1\21\1\0\21\13\1\14\1\13"+
    "\5\0\1\21\3\0\23\14\35\0\1\16\35\0\1\17"+
    "\3\0\1\21\1\0\21\21\1\0\1\21\5\0\1\21"+
    "\1\22\1\0\32\22\10\0\1\40\33\0\1\41\33\0"+
    "\1\42\33\0\1\43\31\0\1\44\1\0\1\45\33\0"+
    "\1\46\33\0\1\47\23\0\2\32\1\16\32\32\1\33"+
    "\1\16\21\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\16\1\33\1\50\17\33\1\32\1\33\5\32\1\33"+
    "\1\32\1\33\1\16\2\33\1\51\3\33\1\52\12\33"+
    "\1\32\1\33\5\32\1\33\1\32\1\33\1\16\4\33"+
    "\1\53\14\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\16\4\33\1\54\14\33\1\32\1\33\5\32\1\33"+
    "\6\0\1\55\33\0\1\56\33\0\1\57\46\0\1\60"+
    "\17\0\1\61\31\0\1\62\36\0\1\63\44\0\1\64"+
    "\14\0\1\32\1\33\1\16\2\33\1\65\16\33\1\32"+
    "\1\33\5\32\1\33\1\32\1\33\1\16\12\33\1\66"+
    "\6\33\1\32\1\33\5\32\1\33\1\32\1\33\1\16"+
    "\7\33\1\67\11\33\1\32\1\33\5\32\1\33\1\32"+
    "\1\33\1\16\1\33\1\70\17\33\1\32\1\33\5\32"+
    "\1\33\1\32\1\33\1\16\7\33\1\71\11\33\1\32"+
    "\1\33\5\32\1\33\11\0\1\72\33\0\1\73\27\0"+
    "\1\74\35\0\1\75\41\0\1\76\22\0\1\77\34\0"+
    "\1\100\35\0\1\101\24\0\1\32\1\33\1\16\3\33"+
    "\1\102\15\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\16\1\33\1\103\17\33\1\32\1\33\5\32\1\33"+
    "\1\32\1\33\1\16\10\33\1\104\1\105\1\106\6\33"+
    "\1\32\1\33\5\32\1\33\1\32\1\33\1\16\2\33"+
    "\1\107\16\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\16\11\33\1\110\7\33\1\32\1\33\5\32\1\33"+
    "\12\0\1\111\33\0\1\112\36\0\1\113\30\0\1\114"+
    "\25\0\1\115\34\0\1\116\43\0\1\117\22\0\1\120"+
    "\27\0\1\32\1\33\1\16\1\33\1\121\17\33\1\32"+
    "\1\33\5\32\1\33\1\32\1\33\1\122\5\33\1\123"+
    "\13\33\1\32\1\33\5\32\1\33\1\32\1\33\1\16"+
    "\6\33\1\124\12\33\1\32\1\33\5\32\1\33\1\32"+
    "\1\33\1\16\3\33\1\124\15\33\1\32\1\33\5\32"+
    "\1\33\1\32\1\33\1\16\13\33\1\125\5\33\1\32"+
    "\1\33\5\32\1\33\1\32\1\33\1\16\15\33\1\126"+
    "\3\33\1\32\1\33\5\32\1\33\1\32\1\33\1\16"+
    "\3\33\1\127\15\33\1\32\1\33\5\32\1\33\13\0"+
    "\1\130\1\131\34\0\1\132\22\0\1\133\43\0\1\131"+
    "\21\0\1\134\5\0\1\135\31\0\1\136\31\0\1\137"+
    "\34\0\1\140\26\0\1\32\1\33\1\16\4\33\1\141"+
    "\14\33\1\32\1\33\5\32\1\33\1\32\1\33\1\16"+
    "\12\33\1\142\6\33\1\32\1\33\5\32\1\33\1\32"+
    "\1\33\1\143\21\33\1\32\1\33\5\32\1\33\1\32"+
    "\1\33\1\16\14\33\1\144\4\33\1\32\1\33\5\32"+
    "\1\33\1\32\1\33\1\16\17\33\1\145\1\33\1\32"+
    "\1\33\5\32\1\33\1\32\1\33\1\146\21\33\1\32"+
    "\1\33\5\32\1\33\11\0\1\147\30\0\1\147\43\0"+
    "\1\150\17\0\1\151\5\0\1\152\40\0\1\153\22\0"+
    "\1\154\31\0\1\155\5\0\1\156\43\0\1\157\13\0"+
    "\1\32\1\33\1\160\21\33\1\32\1\33\5\32\1\33"+
    "\1\32\1\33\1\16\11\33\1\161\7\33\1\32\1\33"+
    "\5\32\1\33\1\32\1\33\1\16\1\33\1\162\17\33"+
    "\1\32\1\33\5\32\1\33\1\32\1\33\1\16\20\33"+
    "\1\163\1\32\1\33\5\32\1\33\2\0\1\164\50\0"+
    "\1\165\31\0\1\166\32\0\1\167\26\0\1\147\41\0"+
    "\1\170\40\0\1\171\11\0\1\32\1\33\1\16\15\33"+
    "\1\172\3\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\173\21\33\1\32\1\33\5\32\1\33\1\32\1\33"+
    "\1\16\1\33\1\174\17\33\1\32\1\33\5\32\1\33"+
    "\4\0\1\175\43\0\1\176\37\0\1\177\27\0\1\200"+
    "\42\0\1\201\10\0\1\32\1\33\1\16\1\33\1\202"+
    "\17\33\1\32\1\33\5\32\1\33\1\32\1\33\1\203"+
    "\21\33\1\32\1\33\5\32\1\33\2\0\1\204\51\0"+
    "\1\205\17\0\1\206\47\0\1\207\17\0\1\210\27\0"+
    "\1\32\1\33\1\122\21\33\1\32\1\33\5\32\1\33"+
    "\4\0\1\211\31\0\1\134\35\0\1\212\31\0\1\213"+
    "\33\0\1\151\33\0\1\155\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\4\1\1\11\1\1\1\11\11\1\1\0"+
    "\5\1\10\0\5\1\10\0\5\1\10\0\7\1\10\0"+
    "\1\1\1\11\5\1\4\0\1\11\4\0\2\1\1\11"+
    "\2\1\1\11\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\3\1\1\11\5\0\1\1\1\11\1\1\5\0\1\1"+
    "\2\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  public static final int IGNORE = 0;
  public static final int ACCEPT = 1;

  public void pushback(int n) {
    yypushback(n);
  }

  public String match() {
    return yytext();
  }

  private static void reportError(String yytext) {
    try {
      PrintWriter p = new PrintWriter(new OutputStreamWriter(System.err,
                                                "GB18030"), true);
      p.println("chtbl.flex tokenization error: \"" + yytext + "\"");
    } catch (UnsupportedEncodingException e) {
      System.err.println("chtbl.flex tokenization and encoding present error");
    }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CHTBLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CHTBLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { yybegin(DATEINHEADER); return IGNORE;
          }
        case 16: break;
        case 1: 
          { reportError(yytext());
          }
        case 17: break;
        case 15: 
          { yybegin(YYINITIAL); return IGNORE;
          }
        case 18: break;
        case 2: 
          { return ACCEPT;
          }
        case 19: break;
        case 13: 
          { yybegin(PREAMBLE); return IGNORE;
          }
        case 20: break;
        case 10: 
          { //System.err.println("Transitioning to HEADER");
                          yybegin(HEADER); return IGNORE;
          }
        case 21: break;
        case 6: 
          { //System.err.println("Transitioning to DOCNO");
                          yybegin(DOCNO); return IGNORE;
          }
        case 22: break;
        case 14: 
          { //System.err.println("Transitioning to YYINITIAL");
                  yybegin(YYINITIAL); return IGNORE;
          }
        case 23: break;
        case 8: 
          { //System.err.println("Transitioning to YYINITIAL");
                   yybegin(YYINITIAL); return IGNORE;
          }
        case 24: break;
        case 12: 
          { //System.err.println("Transitioning to DOCTYPE");
                          yybegin(DOCTYPE); return IGNORE;
          }
        case 25: break;
        case 11: 
          { //System.err.println("Transitioning to YYINITIAL");
                yybegin(YYINITIAL); return IGNORE;
          }
        case 26: break;
        case 3: 
          { return IGNORE;
          }
        case 27: break;
        case 4: 
          { //System.err.println("Transitioning to DATETIME");
                          yybegin(DATETIME); return IGNORE;
          }
        case 28: break;
        case 9: 
          { yybegin(HEADER); return IGNORE;
          }
        case 29: break;
        case 7: 
          { //System.err.println("Transitioning to SRCID");
                          yybegin(SRCID); return IGNORE;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CHTBLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        CHTBLexer scanner = null;
        try {
          scanner = new CHTBLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
